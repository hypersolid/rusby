module Rusby
  module Generators
    module Base
      def generate(ast)
        unless ast.respond_to?(:type)
          # ok, it's not ast node... but it could be a method
          return case ast
                 when :length
                   '.len()'
                 when :new
                   '<new>'
                 when :min
                   '.iter().max()'
                 else
                   ast.to_s
          end
        end
        result = send("generate_#{ast.type.to_s.tr('-', '_')}", ast)
      end

      def generate_send(ast)
        if ast.children[0]
          fold_arrays(ast.children)
        else
          case ast.children[1]
          when :puts
            "\nprintln!(\"{}\", #{generate(ast.children[2])});io::stdout().flush().unwrap();\n"
          when :rust
            ast.children[2].children[0] + ' # generated by Rusby::Preprocessor'
          when :rust_variable
            @known_variables << ast.children[2].children[0]
            nil
          else
            if @known_variables.include?(ast.children[1])
              ast.children[1]
            else
              ri = fold_arrays(ast.children[2..-1])
              result = "#{ast.children[1]}(#{ri.join(', ')});"
              result = 'internal_method_' + result unless @known_methods.include?(ast.children[1])
              result
            end
          end
        end
      end

      def generate_block(ast)
        block_operator = ast.children[0].children[1]
        ri = ast.children[1..-1].map { |node| generate(node) }.compact
        case block_operator
        when :loop
          generate_loop(ast)
        when :each
          generate_each_loop(ast)
        when :rust
          ast.children[1..-1].to_s
        else
          "#{ast.children[0].children[1]} {\n#{ri.join("\n")}\n}"
        end
      end
    end
  end
end
